sum = 0
nbChiffres = 0
while(sum < 1){
sum = sum + runif(1)
nbChiffres = nbChiffres +  1
}
return(nbChiffres)
}
nb <- 100000
total = 0
for (i in 1:nb) {
total = total +  NbChiffresNecessaire()
}
total/nb
x = replicate(nb, NbChiffresNecessaire())
mean(x)
NbChiffresNecessaire <- function(){
sum = 0
nbChiffres = 0
while(sum < 1){
sum = sum + runif(1)
nbChiffres = nbChiffres +  1
}
return(nbChiffres)
}
x = replicate(nb, NbChiffresNecessaire())
print(mean(x))
NbChiffresNecessaire <- function(){
sum = 0
nbChiffres = 0
while(sum < 1){
sum = sum + runif(1)
nbChiffres = nbChiffres +  1
}
return(nbChiffres)
}
x = replicate(100, NbChiffresNecessaire())
print(mean(x))
NbChiffresNecessaire <- function(){
sum = 0
nbChiffres = 0
while(sum < 1){
sum = sum + runif(1)
nbChiffres = nbChiffres +  1
}
return(nbChiffres)
}
x = replicate(100, NbChiffresNecessaire())
print(mean(x))
NbChiffresNecessaire <- function(){
sum = 0
nbChiffres = 0
while(sum < 1){
sum = sum + runif(1)
nbChiffres = nbChiffres +  1
}
return(nbChiffres)
}
x = replicate(100, NbChiffresNecessaire())
print(mean(x))
numbers_summed<- function(){
sum = 0
number_counter = 0
while(sum < 1){
sum = sum + runif(1)
number_counter = number_counter +  1
}
return(number_counter)
}
x = replicate(100, numbers_summed())
print(mean(x))
numbers_summed<- function(){
sum = 0
number_counter = 0
while(sum < 1){
sum = sum + runif(1)
number_counter = number_counter +  1
}
return(number_counter)
}
x = replicate(1000, numbers_summed())
print(mean(x))
numbers_summed<- function(){
sum = 0
number_counter = 0
while(sum < 1){
sum = sum + runif(1)
number_counter = number_counter +  1
}
return(number_counter)
}
x = replicate(1000, numbers_summed())
print(mean(x))
numbers_summed<- function(){
sum = 0
number_counter = 0
while(sum < 1){
sum = sum + runif(1)
number_counter = number_counter +  1
}
return(number_counter)
}
x = replicate(1000, numbers_summed())
print(mean(x))
data(iris)
head(iris)
# Randomly sample 100 of 150 row indexes
indexes = sample(
x=1:150,
size=100
)
indexes
# Inspect the random indexes
print(indexes)
# Load the decision tree package
library(tree)
install.packages("tree")
library(tree)
# Load the decision tree package
library(tree)
# Train a decision tree model
model = tree(
formula = Species ~.,
data=train
)
# Crete a train set from indexes
train = iris[indexes, ]
# Train a decision tree model
model = tree(
formula = Species ~.,
data=train
)
# Inspect the model
summary(model)
# Visualize the decision tree model
plot(model)
text(model)
# Load color brewer library
library(RColorBrewer)
#Create a scatterplot colored by species
plot(
x = iris$Pepal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
# Create a color palette
palette = brewer.pal(3, "Set2")
#Create a scatterplot colored by species
plot(
x = iris$Pepal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
data(iris)
head(iris)
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes = sample(
x=1:150,
size=100)
# Inspect the random indexes
print(indexes)
# Crete a train set from indexes
train = iris[indexes, ]
# Crete a test set from remaining indexes
test = iris[-indexes, ]
# Load the decision tree package
library(tree)
# Train a decision tree model
model = tree(
formula = Species ~.,
data=train
)
# Inspect the model
summary(model)
# Visualize the decision tree model
plot(model)
text(model)
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette = brewer.pal(3, "Set2")
#Create a scatterplot colored by species
plot(
x = iris$Pepal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
palette
length(iris$Pepal)
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
partition.tree(snip.tree(model, nodes = c(12, 7)))
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
# plot the decision boundaries
partition.tree(
tree = snip.tree(model, nodes = c(12, 7)),
label = "Species",
add = TRUE
)
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
data(iris)
data(iris)
head(iris)
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes = sample(
x=1:150,
size=100)
# Inspect the random indexes
print(indexes)
# Crete a train set from indexes
train = iris[indexes, ]
# Crete a test set from remaining indexes
test = iris[-indexes, ]
# Load the decision tree package
library(tree)
# Train a decision tree model
model = tree(
formula = Species ~.,
data=train
)
# Inspect the model
summary(model)
# Visualize the decision tree model
plot(model)
text(model)
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette = brewer.pal(3, "Set2")
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
partition.tree(snip.tree(model, nodes = c(12, 7))
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
partition.tree(snip.tree(model, nodes = c(12, 7)))
# plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
partition.tree(snip.tree(model, nodes = c(12, 7))  label = "Species",
add = TRUE)
# plot the decision boundaries
partition.tree(
tree = snip.tree(model, nodes = c(12, 7)),
label = "Species",
add = TRUE
)
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
# plot the decision boundaries
partition.tree(
tree = snip.tree(model, nodes = c(12, 7)),
label = "Species",
add = TRUE
)
# Prediect with the model
predictions = predict(
object = model,
newdata = test,
type = "class"
)
#Create a confusion matrix
table(x = predictions,
y = test$Species)
library(caret)
install.packages("caret")
library(caret)
# Evaluate the prediction results
confusionMatrix(data =  predictions,
reference = test$Species)
install.packages('e1071', dependencies=TRUE)
# Evaluate the prediction results
confusionMatrix(data =  predictions,
reference = test$Species)
# Save the tree model
save(model, file = "Tree.RData")
load("~/Documents/Rscripts/Tree.RData")
View(model)
load("~/Documents/Rscripts/Tree.RData")
View(model)
install.packages("shiny")
# Load shiny
library(shiny)
# Create a UI
ui = fluidePage("Hello World!")
# Create a server
server = function(input, output){}
# Create a UI
ui = fluidPage("Hello World!")
# Create a server
server = function(input, output){}
shinyApp(ui, server)
# Create a UI with I/O controls
ui = fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server = function(input, output){
output$text <- renderText({paste("You selected: ", unput$num)})
}
# Create a shiny app
shinyapp(ui = ui, server = server)
# Create a shiny app
shinyapp(ui = ui, server = server)
# Create a UI with I/O controls
ui = fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server = function(input, output){
output$text <- renderText({paste("You selected: ", unput$num)})
}
# Create a shiny app
shinyApp(ui = ui, server = server)
# Create a UI with I/O controls
ui = fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server = function(input, output){
output$text <- renderText({paste("You selected: ", input$num)})
}
# Create a shiny app
shinyApp(ui = ui, server = server)
# Load tree model
load("Tree.RData")
# Load shiny
library(shiny)
# Create a UI
ui = fluidPage("Hello World!")
# Create a server
server = function(input, output){}
# Create a shiny app
shinyApp(ui, server)
# Create a UI with I/O controls
ui = fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
server = function(input, output){
output$text <- renderText({paste("You selected: ", input$num)})
}
# Create a shiny app
shinyApp(ui = ui, server = server)
# Load tree model
load("Tree.RData")
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette = brewer.pal(3, "Set2")
data(iris)
head(iris)
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes = sample(
x=1:150,
size=100)
# Inspect the random indexes
print(indexes)
# Crete a train set from indexes
train = iris[indexes, ]
# Crete a test set from remaining indexes
test = iris[-indexes, ]
# Load the decision tree package
library(tree)
# Train a decision tree model
model = tree(
formula = Species ~.,
data=train
)
# Inspect the model
summary(model)
# Visualize the decision tree model
plot(model)
text(model)
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette = brewer.pal(3, "Set2")
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal width (cm)"
)
# plot the decision boundaries
partition.tree(
tree = snip.tree(model, nodes = c(12, 7)),
label = "Species",
add = TRUE
)
# Prediect with the model
predictions = predict(
object = model,
newdata = test,
type = "class"
)
#Create a confusion matrix
table(x = predictions,
y = test$Species)
library(caret)
# Evaluate the prediction results
confusionMatrix(data =  predictions,
reference = test$Species)
# Save the tree model
save(model, file = "Tree.RData")
